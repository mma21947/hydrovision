/**
 * Script para testar o funcionamento do calend√°rio
 * Este arquivo verifica se o calend√°rio est√° sendo inicializado corretamente
 */

console.log("üîç Script de diagn√≥stico do calend√°rio carregado");

// Executar verifica√ß√£o quando a p√°gina estiver carregada
document.addEventListener('DOMContentLoaded', function() {
    console.log("üìã Iniciando diagn√≥stico do calend√°rio");
    
    // Verificar se o FullCalendar est√° carregado
    if (typeof FullCalendar === 'undefined') {
        console.error("‚ùå ERRO: A biblioteca FullCalendar n√£o est√° carregada!");
        mostrarErroNaPagina("A biblioteca FullCalendar n√£o foi carregada. Verifique se o link para o CDN est√° correto.");
        return;
    } else {
        console.log("‚úÖ FullCalendar est√° carregado corretamente");
    }
    
    // Verificar se o elemento do calend√°rio existe
    const elementoCalendario = document.getElementById('calendario-disponibilidade');
    if (!elementoCalendario) {
        console.error("‚ùå ERRO: Elemento do calend√°rio (ID: calendario-disponibilidade) n√£o encontrado!");
        mostrarErroNaPagina("O elemento HTML do calend√°rio n√£o foi encontrado na p√°gina.");
        return;
    } else {
        console.log("‚úÖ Elemento do calend√°rio encontrado");
    }
    
    // Verificar se o calend√°rio foi inicializado
    if (typeof window.calendar === 'undefined') {
        console.error("‚ùå ERRO: Inst√¢ncia do calend√°rio n√£o inicializada!");
        mostrarErroNaPagina("O calend√°rio n√£o foi inicializado corretamente.");
        
        // Tentar inicializar o calend√°rio
        console.log("üîß Tentando inicializar o calend√°rio manualmente...");
        
        try {
            // Obter ID do t√©cnico da URL
            const urlParams = new URLSearchParams(window.location.search);
            const tecnicoId = urlParams.get('tecnico_id') || document.querySelector('meta[name="tecnico-id"]')?.getAttribute('content') || '1';
            
            window.calendar = new FullCalendar.Calendar(elementoCalendario, {
                locale: 'pt-br',
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,listWeek'
                },
                events: [
                    {
                        title: 'Evento de Teste',
                        start: new Date().toISOString().split('T')[0],
                        color: '#3498db'
                    }
                ]
            });
            
            window.calendar.render();
            console.log("‚úÖ Calend√°rio inicializado manualmente com sucesso!");
            mostrarSucessoNaPagina("Calend√°rio recuperado e inicializado pelo script de diagn√≥stico.");
        } catch (erro) {
            console.error("‚ùå Falha ao inicializar o calend√°rio manualmente:", erro);
            mostrarErroNaPagina("N√£o foi poss√≠vel inicializar o calend√°rio: " + erro.message);
        }
    } else {
        console.log("‚úÖ Inst√¢ncia do calend√°rio encontrada");
        
        // Verificar se existem eventos no calend√°rio
        const eventos = window.calendar.getEvents();
        console.log(`üìä Eventos presentes no calend√°rio: ${eventos.length}`);
        
        if (eventos.length === 0) {
            console.warn("‚ö†Ô∏è O calend√°rio n√£o possui eventos");
            
            // Adicionar um evento de teste para verificar se o calend√°rio est√° funcionando
            window.calendar.addEvent({
                title: 'Evento de Teste (Diagn√≥stico)',
                start: new Date().toISOString().split('T')[0],
                color: '#3498db'
            });
            
            console.log("‚úÖ Evento de teste adicionado ao calend√°rio");
        }
    }
    
    console.log("üèÅ Diagn√≥stico do calend√°rio conclu√≠do");
});

// Fun√ß√£o para mostrar erro na p√°gina
function mostrarErroNaPagina(mensagem) {
    const container = document.getElementById('calendario-disponibilidade');
    if (container) {
        const alerta = document.createElement('div');
        alerta.className = 'alert alert-danger mt-3';
        alerta.innerHTML = `
            <strong>Erro no calend√°rio:</strong> ${mensagem}
            <p class="mt-2 mb-0">
                <button class="btn btn-sm btn-outline-danger" onclick="location.reload()">
                    Recarregar P√°gina
                </button>
            </p>
        `;
        container.parentNode.insertBefore(alerta, container);
    }
}

// Fun√ß√£o para mostrar sucesso na p√°gina
function mostrarSucessoNaPagina(mensagem) {
    const container = document.getElementById('calendario-disponibilidade');
    if (container) {
        const alerta = document.createElement('div');
        alerta.className = 'alert alert-success mt-3';
        alerta.innerHTML = `
            <strong>Sucesso:</strong> ${mensagem}
            <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Fechar"></button>
        `;
        container.parentNode.insertBefore(alerta, container);
    }
} 